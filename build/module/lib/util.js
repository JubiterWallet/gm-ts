import { SM2 } from './sm2';
import { SM3 } from './sm3';
export function computeZDigest(data, pubKey, { dataEncoding, keyEncoding, hashEncoding, }) {
    // e = sm3(Z||msg)
    const sm3 = new SM3();
    sm3.update(Z(pubKey, { keyEncoding }));
    sm3.update(data, dataEncoding);
    return sm3.final(hashEncoding);
}
export function Z(key, { keyEncoding, hashEncoding }) {
    // Z = h(ENTL || ID || a || b || xG || yG || xA || yA)
    const sm2 = new SM2();
    //const curve = sm2.curve as curve.short;
    const P = sm2.keyFromPublic(key, keyEncoding).getPublic();
    const id = '1234567812345678';
    const sm3 = new SM3();
    const idLen = id.length * 8;
    const entl = new Uint8Array(2);
    entl[0] = idLen >>> 8;
    entl[1] = idLen & 0xff;
    sm3.update(entl);
    sm3.update(id);
    // use origin value. values in curve maybe changed for compute easy
    const a = 'FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC';
    const b = '28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93'; // <--- YES this gay!
    const gx = '32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7';
    const gy = 'BC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0';
    sm3.update(a, 'hex');
    sm3.update(b, 'hex');
    sm3.update(gx, 'hex');
    sm3.update(gy, 'hex');
    sm3.update(P.getX().toBuffer());
    sm3.update(P.getY().toBuffer());
    return sm3.final(hashEncoding);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQzVCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFNUIsTUFBTSxVQUFVLGNBQWMsQ0FDNUIsSUFBMEIsRUFDMUIsTUFBb0MsRUFDcEMsRUFDRSxZQUFZLEVBQ1osV0FBVyxFQUNYLFlBQVksR0FLYjtJQUVELGtCQUFrQjtJQUNsQixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2QyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztJQUMvQixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUVELE1BQU0sVUFBVSxDQUFDLENBQ2YsR0FBaUMsRUFDakMsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFrRDtJQUU3RSxzREFBc0Q7SUFDdEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUN0Qix5Q0FBeUM7SUFDekMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDMUQsTUFBTSxFQUFFLEdBQUcsa0JBQWtCLENBQUM7SUFDOUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUN0QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUM1QixNQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxLQUFLLENBQUMsQ0FBQztJQUN0QixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQztJQUN2QixHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDZixtRUFBbUU7SUFDbkUsTUFBTSxDQUFDLEdBQUcsa0VBQWtFLENBQUM7SUFDN0UsTUFBTSxDQUFDLEdBQUcsa0VBQWtFLENBQUMsQ0FBQyxxQkFBcUI7SUFDbkcsTUFBTSxFQUFFLEdBQUcsa0VBQWtFLENBQUM7SUFDOUUsTUFBTSxFQUFFLEdBQUcsa0VBQWtFLENBQUM7SUFDOUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNoQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNqQyxDQUFDIn0=